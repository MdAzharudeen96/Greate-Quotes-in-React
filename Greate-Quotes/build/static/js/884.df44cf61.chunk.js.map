{"version":3,"file":"static/js/884.df44cf61.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://great-quotes/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://great-quotes/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://react-http-5a1e8-default-rtdb.asia-southeast1.firebasedatabase.app';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__9h8Dh\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__ogBoi\",\"loading\":\"QuoteForm_loading__gyIuQ\",\"control\":\"QuoteForm_control__8SqBM\",\"actions\":\"QuoteForm_actions__I8AC6\"};","import { Fragment, useRef, useState } from 'react';\n// import { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  };\n\n  return (\n    <Fragment>\n      {/* Prompt is currently not supported yet by v6 */}\n      {/* <Prompt\n        when={isEntering}\n        message={(location) =>\n          'Are you sure you want to leave? All your entered data will be lost!'\n        }\n      /> */}\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className='btn'>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport QuoteForm from '../components/quotes/QuoteForm';\nimport useHttp from '../hooks/use-http';\nimport { addQuote } from '../lib/api';\n\nconst NewQuote = () => {\n  const { sendRequest, status } = useHttp(addQuote);\n  const history = useNavigate();\n\n  useEffect(() => {\n    if (status === 'completed') {\n      history.push('/quotes');\n    }\n  }, [status, history]);\n\n  const addQuoteHandler = (quoteData) => {\n    sendRequest(quoteData);\n  };\n\n  return <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />;\n};\n\nexport default NewQuote;"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","props","className","classes","children","useState","setIsEntering","authorInputRef","useRef","textInputRef","Fragment","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","ref","rows","onClick","useHttp","history","useNavigate","useEffect"],"sourceRoot":""}